package studio.forface.ermes.servicebuilder

import studio.forface.ermes.annotations.ApiService
import studio.forface.ermes.api.ErmesApi
import studio.forface.ermes.exceptions.InvalidUrlException
import studio.forface.ermes.exceptions.MissingAnnotationException
import studio.forface.ermes.utils.findAnnotation
import kotlin.properties.ReadOnlyProperty
import kotlin.reflect.KClass
import kotlin.reflect.KProperty

/**
 * @author Davide Giuseppe Farella.
 * TODO
 */
class ServiceBuilder internal constructor ( ermesApi: ErmesApi, serviceKlass: KClass<*> ) {

    /**
     * An instance of [ApiServiceAnnotationWorker]
     * @throws MissingAnnotationException if `serviceKlass` is not annotated with [ApiService]
     */
    private val apiServiceAnnotationWorker = ApiServiceAnnotationWorker(
        serviceKlass.findAnnotation<ApiService>() ?: throw MissingAnnotationException(
            "The service must be annotated with ${ApiService::class.qualifiedName}"
        )
    )

    /**
     * A validated base [Url] for the calls
     * @throws InvalidUrlException if the [Url] is not valid
     * @see Url.validateOrThrow
     */
    private val baseUrl = Url( ermesApi.baseUrl ).validateOrThrow()

    /** Create an implementation at runtime of the requested Service [S] */
    inline fun <reified S> createService() : S {

        TODO("Not Implemented" )
    }
}

/**
 * Expose a public constructor for [ServiceBuilder] within a [ReadOnlyProperty] scope, for the public inlined
 * [ErmesApi.service] function.
 */
@Suppress("FunctionName", "unused")
fun ReadOnlyProperty<ErmesApi, *>.ServiceBuilder_Constructor( ermesApi: ErmesApi, serviceKlass: KClass<*> ) =
        ServiceBuilder( ermesApi, serviceKlass )

/**
 * Create a Service by property delegation
 * @return [ReadOnlyProperty] representing the implementation of the requested [S], generated by [ServiceBuilder].
 */
inline fun <reified S> ErmesApi.service() = object : ReadOnlyProperty<ErmesApi, S> {

    /** A lazy value for the Service [S] */
    val value: S by lazy { ServiceBuilder_Constructor(this@service, S::class ).createService<S>() }

    /**
     * @see ReadOnlyProperty.getValue
     * @return [value]
     */
    override fun getValue( thisRef: ErmesApi, property: KProperty<*>): S = value
}